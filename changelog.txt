change log

### 17.04.2019
- included the first function evaluation of evaluateGreenOnly in the loop.
- removed some obsolete comments in evaluateGreenOnly
- added initial tau to evaluateGreenOnly

### 11.04.2019
- changed the way how the matrix-vector products are composed for evaluate_green_only so it can be more efficient
    benchmarks showed minor speedup for small systems but it gets better for large systems with many threads
    also it has been checked to produce the same results

### 03.04.2019
- changed temporary state in evaluateGreenOnly to be a shared array as well

### 02.04.2019
- fixed bug where green functions were calculated wrong... the state with negative time evolution was mapped onto the
    normal state so at each step the state was evolved forwards in time and then back.

### 28.03.2019
- changed grammar in error message of evaluateGreenOnly
- changed definition of difference time to match fourier transform
    -> switched conj. and normal in initLesser(/Greater)EvolutionMatrix
    -> switched self.state and tmpState
- changed only trace calculation in evaluateGreenOnly to single level and trace calculation
- (hopefully) improved time estimation in evaluateGreenOnly

### 11.02.2019
- fixed severe bug where conjugate construction array was linked to normal construction array memory!

### 06.02.2019
- added notification when only utilizing one core
- changed iterator to be shared memory as well, passing arguments didn't work as planned so the density matrix was wrong
    this then finally resolved the error noticed in commit 0c675fe from 01.02.2019
- reduction of overhead and CPU blocking by creating 1 less process and let the final part be taken by the main process
- check if the partial trace still gives correct results!

### 04.02.2019
- changed static method clearDensityData to be actually static
- changed the clear density data part of prep folders to take the correct path
- when the number of reduction steps is smaller than 4e4 and number of cores is not explicitly given, reduce to single
    core reduction algorithm due to large overhead

### 01.02.2019
- changed shared array initialization to adapt to complex128 or complex64
- when running the default setup there are several negative eigenvalues and it is very slow - why?

### 30.01.2019
- removed old reduced density matrix calculation
- imporoved initEvolutionMatrix performance by memory usage tweaks and changing to fortran array type for matrix_power

### 29.01.2019
- removed exit() on line 150 from entPlot.py
- prepared density matrix & state (unprotected) and reduced density matrix (protected) for multiprocessing
- added multiprocessing as standard for reduced density matrix calculation, left old for performance checking

### 28.01.2019
- changed timeEvolution to use np.dot with output being the state vector itself (possible speedup)
- changed updateDensityMatrix to use np.outer with output (definite speedup)
- changed all occurences of the NUMPY dot product in evaluateGreenOnly to write to a specific output, not possible for
    sparse matrices
- speedup by conjugating state once for reduceDensityMatrixFromState

### 22.01.2019
- fixed bug where density matrix was not created when only calculating total entropy

### 21.01.2019
- corrected date of last changelog entry
- speedup of initialize via change of getQuadratic
    -> changed from appending to initializing with the right size straight away
- removed getCreatorRed and getDestructorRed, they were obsolete and unusable
- removed getGreaterCreationAdj
- removed getGreaterCreationInv
- changed reduce matrix to output dtype=self.datType matrix
- speedup of initIteratorRed
    -> changed from appending to initializing with the right size straight away
- with that automatically fixed bug that initializing the iterator twice would just append it
- added initialization time to stdout and progress out

### 15.01.2010
- added data folder option to configfile
- added check if folder name ends on '/', will be appended if necessary

### 26.12.2018
- changed default in greater evolution matrix to be conj=False and switched cases in exponent sign choice
- negative tau option for evaluateGreenOnly should now work

### 22.12.2018
- added option to conjugate "normal" time evolution operator as well
- added negative tau option to evaluateGreenOnly
- added this as a Flag for the config file

### 24.08.2018
- diagonalization of reduced matrixes now able to handle matrices that are reduced to 1D (saved as arrays)

### 22.08.2018
- added dmreddiag to store the diagonalized reduced densitymatrix separated into blocks
- added save reduced hamiltonian routine
- fixed bug where occupations would still be written even if it has been turned of

### 14.06.2018
- changed the way indices were used in the normal green function evaluation (BAD PROBLEM)
    there was a mistake which (only in very special cases) did lead to almost the correct result!

### 13.03.2018
- a formatting error was hidden in the green file header, cleared this
- apparrently the np.dot must have a C-Array as output, so the temporary green evolution matrix is C as well
- changed green step distance to round before converting to int (brought up error, since it was division on two floats)

### 12.03.2018
- continued working on the previous task
    - finished config and time evolution init part
    - finished evaluation part
    - NEED TO TEST NOW!
- changed evolution matrices to be in fortran data format

### 09.03.2018
- added a green function only flag which should do the following:
    1. perform the time evolution of the state vector to COM time in ONE step and normalize (maybe too much?)
    2. initialize the greater and lesser time evolution matrices with a different deltaT
        and raise it to an appropriate power for smaller difference time steps
    3. re-initialize the state time evolution operator for the smaller time step
    4. calculate the TRACE of the greater and lesser green function step by step

### 21.02.2018
- ffs the damn green function stuff was totally messed up...
    evolution matrices were conjugate, time steps were going in the exact
    greater annihilation was actually the creation operator!

### 04.01.2018
- added time-symmetric option for dft (only forward dft up to now)

### 03.01.2018
- changed arange(self.dim, 1) to arange(self.dim) in order to produce a correct array... stepsize 1 is automatic

### 02.01.2018
- happy new year
- added occendiag to store the diagonal in energy basis (weighted and unweighted matrix elements)
- added occendiag to plot the diagonal in energy basis (weighted and unweighted matrix elements)
- also removed the old diagonal expectation storage since it was irritating
- changed file for occupation operator matrix in energy basis from occ%i to occ_energynasis_%i
- slight overhaul of the whole energy basis calculation to be marginally more intuitive
- renamed diagexp to occendiagexp
- changed all range(0, n) to range(n)

### 18.12.2017
- changed all .txt to .dat !!!
- fixed green function finally
- changed init spec slightly to be more intuitive and safe
- changed spec plotting to be reasonable
- changed green function evaluation from multi_dot to nested dot - see if this is faster!

### 13.12.2017
- replaced the evaluate green to evaluate green with offset but have  offset 0 if not specified
- changed data storage of green function to include com time in filename
- changed entanglement spectrum to use reduced hamiltonian instead of occupations
- NOTE: still need to complete the change for entanglement spectrum!

### 12.12.2017
- changed green function definition such that both have -i in front! also there was a mistake
- commented reduced energy in updateAll since it was only for test purposes
- and bugfix for initial green function value false convention!

### 05.12.2017
- added warning when correlations indices input is wrong
- extended correlations to all possible even numbers of operators
- added possibility to get creation and annihilation alone in reduced basis

### 04.12.2017
- removed print('a') if kred is empty!
- added density density correlation function to the parameters

### 29.10.2017
- added splitting into greater and lesser greensfunctions
- added entanglement spectrum to calculation parameters
- added a savetxt algorithm for the entanglement spectrum
- added the already scaled time to show up in the entanglement spectrum data header
- added plotmatrix again since it might be useful
- NOTE: for the future, rely more on savetxt and appending! see:
    https://stackoverflow.com/questions/27786868/python3-numpy-appending-to-a-file-using-numpy-savetxt

### 16.10.2017
- dft omits last point if number of datapoints is even

### 13.10.2017
- extended time_format by showing hours >= 100 and above 999h to show days automatically

### 12.10.2017
- added linebreak in progress.log after time evolution
- changed plotting to recognize what data is created (basically added if clause for reduced ent and occ)
- fixed dft frequencies to be correctly calculated
- fixed dft of greens function to get the correct sample spacing
- NOTE: DFT can only handle uneven numbers of datapoints, fix this!

### 10.10.2017
- fixed eta for green's function
- changed updateAll to be outside the if clause for storeData
- added config parameter for reduced entropy and occupation number

### 05.10.2017
- fixed bug where reduced density matrix was not initialized correctly for only one traced out level
- fixed bug where progress output for greens functions with more than 999 datapoints was broken

### 04.10.2017
- changed time output in progress display to dynamically choose the best format

### 28.09.2017
- changed character code for mu in time_format to actually print out a mu
- fixed bug in progress print for evaluate_green

### 27.09.2017
- changed getQuartic like functions to multiplication with dot instead of asterisk
- changed occupation numbers to be also calculated when reducing from state (this was a feature previously)
- added more information to progress.log and included print commands in respective methods
- huge cleanup with PyCharm - basically initialized every variable and made everything explicit
- added green-function progress output to stdout and progress.log
- added methods for progress file opening and closing
- a metric shit ton of cosmetics
- added function time_format for int(seconds) to str(sensible)

### 26.09.2017
- added optimizations for only one level left
- added optimizations for only two levels overall
- also added those for reduce from state - try this for those cases
- !!! fixed a bug where the density matrix indicator was not set correctly, resulting in a reallocation every time!
- changed cosmetics of progress bar

### 25.09.2017
- added a self-programmed DFT to the code (as an external python file dft.py)

### 21.09.2017
- fixed bug where plotting of energies fails - a backslash was too much in the axix label
- changed expectation value of energy format from 'e' to 'f'
- added a factor of 2 to the time steps in FT of Green function, since the difference times changes by 2 deltaT

### 20.09.2017
- added some booleans to control folder management

### 19.09.2017
- changed offdiag config parameter to offdiagocc
- renamed occensingles config parameter to offdiagoccsingles
- renamed files:
    offdiagonal to offdiagocc
    offdiagsingles to offdiagoccsingles
    offdiagsingleinfo to offdiagoccsinglesinfo
    diagsingles to diagoccsingles
    diagexpect to diagoccexpect

- renamed plotting of offdiagonals from plotOffDiagSingles to plotOffDiagOccSingles
- in entPlot.py renamed plotOffDiagSingles to plotOffDiagOccSingles
- added the same procedure for offdiagdens and offdiagdensred
    this includes calculation, hamiltonian initialization for the reduced space and plotting
- removed unused tmp declaration in al initHamiltonian like methods
- changed problem where typecasting of the dimension in dimOfBasis was not recognized properly
    actually removed typecasting completely since it is not supported for scipy.special.binom
- changed expectValueDM and expectValueRed to be able to handle sparse matrices
- added energy of the subsystem calculation (in the config as reducedenergy) and plotting
- added method to init all needed hamiltonians
- added method to init all needed evolution matrices
- changed updateEnergy to updateTotalEnergy

### 15.09.2017
- added dynamic point and bar scaling in eigendecomposition/eigenenergy plot
- changed filename for total energy from energy.txt to total_energy.txt

### 13.09.2017
- reformatted via PyCharm
- fixed unassigned string variable in plotDensityMatrixAnimation

### 05.09.2017
- changed plotted averages to start only at designated averaging point

### 04.09.2017
- fixed skipping of density matrix files (variable was not class wide)
- fixed index occuring in microcanonical energy state method
- changed init to omit calling prepFolders if plotOnly is set

### 31.08.2017
- added off-diagonal elements sum of reduced density matrix
- added plotting of the above

### 25.07.2017
- speedup of off-diagonals calculation by avoidance of small steps and utilization of multithread
- gotten rid of enStateBra since it really is not needed to be stored separately
- there was an unnecessary statement at the end of updateEigendecomposition
- off diagonal matrix calculation a lot faster due to correct use of dot (same as in the other cases with sparse matrices)
- biased multidot in greensfunction part a bit but it is now faster (due to sparseness .dot)
- removed all leftover occurences of .toarray() which are avoidable
- off diagonal plot can now handle zero elements
- sum of off diagonals plot text alignment
- finding of largest off diagonals did not work anymore - overthink outer product algorithm!

### 24.07.2017
- averages for plotting are now only calculated when needed
- incredible speedup in eigendecomposition due to avoidance of small steps, utilization of multithread and sparseness of occupation number operators

### 19.07.2017
- changed state init from (self.dim,) to (self.dim)

### 18.07.2017
- omitting check for imaginary eigenvalues of the density matrix (eigvalsh should already do this)

### 17.07.2017
- changed (almost) every occasion of einsum to the apropriate multi_dot or outer with dot -> should make more mutithread usage now
- hardcore profiling showed a major slowdown in the usage of np.real and np.imag - replaced those with .real and .imag
- MAJOR major speedup by exploiting sparseness of the occupation number matrices
- finally found the additional dimension problem in the time step - the evolution matrix was a np.matrix which caused self.state to be one as well
- changed norm back to la.norm
- additionally changed some occasions of np.conjugate
- updated main.py

### 13.07.2017
- bugfix in offdiagonals where an occurance of multidot had a wrong input type
- bugfix in offdiagsingles where multidot was used for a scalar multiplication (exchanged with *)

### 11.07.2017
- changed timescale plot to be base 10 logarithmic
- added typical energy difference to timescale plot

### 05.07.2017
- added hanning filter to fft for nicer results
- added fitting of weights

### 03.07.2017
- Changed all the asterisks in the greensfunction evaluation to multi_dot because it was shit and didnt give the correct results
- Changed green store to store flattened array because multidot is actually intelligent enough to deal with normal vectors
- Added many debugging message returns to the greensfunction part, please remove later!
- Somehow the energy is still negative, there is a problem somewhere.

### 28.06.2017
- updated main.py to get the cool stuff
- added optimize=true to einsum

### 27.06.2017
- changed off diagonal singles to only semilog plot and split into two plots
- added inlays to the above
- changed eigendecomposition linewidth again

### 26.06.2017
- changed year in last two entrys to be correct
- greensfunction changes:
	- complex conjugate was wrong
	- the time steps in time evolution matrix was dt not the correctly raised power
	- fft has to be divided by number of steps to maintain norm
- added condition to deletion of diagonal elements of operators in updateEigendecomposition (to prevent errors because of not-set variables)

### 21.06.2017
- changed linewidth for all the off-diagonal plots
- added loglog plots to the single off-diagonals averaged
- added logplots and loglog plots to the summed off-diagonals

### 20.06.2017
- changed maximum off-diagonal element lookup to take the spectral coefficients into account
- fixed an issue with conditions in spectral repres. storage
- added weighted diagonals in spectral representation to the off-diagonal plots (how ironic)

### 19.06.2017
- changed matrix transformation from einsum to dot product (a lot faster)
- added some time indicators
- added off diagonals only and absolute value to number operator in energy basis plotting
- fixed range of colormap in the above to be variable (to the total number of particles)
- fixed additional file "offdiagonals.txt" additionally created
- fixed plotting of off diagonals now only if wanted
- added cumulative integral of off-diagonals
- !!! for some reason the state array becomes a np.matrix and the updateOffDiag routine didnt want that, added hotfix
- added single off diagonal elements as well
- fixed problem with eigenvector deletion was prevented by false bool
- added single off diagonal plotting and config

### 18.06.2017
- added off-diagonal occupation number calculation on runtime (handle with care, rather slow)
- removed the numpy.distutils.system_info.tmp import in entPlot, that was a mistake done far in the past

### 27.04.2017
- actually need 101 points to get the full range!!! added this partially only - work in progress (also actually need uneven points for greensfunctions to work)
- check for data points to time steps calculation - last point is not taken but first one is... so datapoints+1 will be produced
- two time green working but i think there is an time offset in there... check this!
- changed index of green function to be the acual middle one

### 26.04.2017
- started changing to general retarded two time greens function - temporarily only 100 points!
- changed initial state memory to array of N-particle system sized full state vector saves + added time stamp array
- note: always(!!!) need an even number of green function points for this to work.
- note: greensfunction can be evaluated only after time evolution has finished - so it's maybe a good idea to free memory before that

### 24.04.2017
- added option for green function plot
- added option for order of discrete time evolution. It is now in the .ini file and not in the function call.
	This is a setup for reducing the actual function calls in the run script.
- finalized time evolution for retarded Green's function

### 21.04.2017
- added retarded Green's function to the time evolution! (yay) (in progress - need to actually do time evolution and value storing)
- improved eigendecomposition function and diagonalization function to be more intelligent
- added spectral density plot option

### 20.04.2017
- finished eigenvalue and spectral function part, is obsolete because of very large dimension - keep it but do not use it!
- moved hamiltonian generation to function call of the class. Parameters are now in the .ini

### 18.04.2017
- more progress on lower dimension hamiltonian

### 17.04.2017
- added lower dimension hamiltonian for spectral function (work in progress)

### 03.04.2017
- finally added default settings in the default.ini
- added timescale plotting to the normal routine
- made energy state more modular - all parameters are now lists
- added random phase to energy state
- added random phase for real coefficients to energy state
- hotfix: random distribution was not working

### 31.03.2017
- added occupation number per level plot
- changed averaging starting index to be fraction of total time evolution (entPlot.py)

### 27.03.2017
- fixed bug where eigenenergies and decomposition were stored twice in the same file! (delete appended data if needed)

### 23.03.2017
- added option for eigenvalue storing and plotting (not! the decomposition, this is separate)
- fixed bug where diagonal ensemble expectation value was used even if plotdiagexp was not set

### 17.03.2017
- added option for diagonal expectation value plot and storing
- fixed bug where time evolution matrix was not raised to appropriate power if hamilstore was set to false

### 16.03.2017
- added options for eigenvalue decomposition and plotting - still axis not labeled right!
- added fluctuation calculation for all levels and subsystem-entropy! also added N_tot additionally
- fixed microcanonical expectation values using average linestyle instead of expectation linestyle

### 09.03.2017
- added energy-space plot of occupation number operators (remove in the future, is just a temporary feature)
- added rectangular distribution

### 08.03.2017
- added skewness option to gaussian distribution
- added diagonal representation check (see ETH wiki article)

### 07.03.2017
- y-axis for new plots is no longer offending the reader but still not finished
- added plt.tight_layout to the plotting
- removed end-gap in new plots
- added comparison to microcanonical expectation value
- added rectangular distribution option for energy space
- added differently weighted amplitudes for many overlapping distributions in energy space

### 03.03.2017
- changed plotting only to a faster version where NO matrices and bases are created
- changed "preparations finished after" to minute and second instead of second
- changed eigenvector decomposition to more detailed data (phase, eigenvalue expect. values and so on)
--> axis labels for plot are still missing!
- changed default settings back to four levels
- changed option for varying sign and skipping of eigenvalues for stateEnergy
- added plot and data file for decomposition in occupation number space

### 20.02.2017
- prepared for final parameter set with 5 levels
- changed energy starting state routine to set mu according to the energy, not the number

### 17.02.2017
- changed AGG chunksize to 0, seems to be faster
- corrected latex error in energy plot
- changed mean value and standard deviation to numpy functions
- cosmetics in eigendecomposition plot

### 16.02.2017
- funny enough, there was a date error in the last changelog entry
- forgot to put a change in last entry
- removed hamiltonian eigenvalue decomposition from config, since it will be needed from now on
- density matrix will only be allocated when needed (better memory usage, since eigenvectors have to be stored at some point)
- added eigenvector decomposition (in calculation and plotting)
- added flag -p for only plotting
- added flag -pd for only data plotting
- added flag -pa for only animation plotting
- added workaround for supressing scipy linalg lapack error... harmless testing error

### 15.02.2017
- removed expectation value of transition... not needed at this point and it was only work in progress
- changed ini file creation to copy from default config.ini
- added hamiltonian eigenvalue decomposition as parameter and save txt file in data folder now
- changed plot to use new destination of hamiltonian eigenvalues
- added latex support in entPlot
- added size parameters for plot in config.ini
- arbitrary orders of time evolution now possible
- total entropy and energy only calculated 100 times now
- changed entplot accordingly
- NO BACKWADS COMPATIBILITY FOR THIS!!!
- changed typo in changelog 01.02.2017
- changed data storage to %.16e for almost everything!
- added timescale to plotting (usually transition element t or J)

### 01.02.2017
- added running average and total average and fluctuations... nice stuff though

### 26.01.2017
- changed entPlot to only plot total entropy if calculated

### 24.01.2017
- still no progress in transition element expectation value (frozen for now!!!)
- changed hamiltonian and all the quartic and quadratic matrices to sparse ones <--- important

### 20.01.2017
- added expectation value of transition elements
- corrected typo in 14.01.2017 changelog
- note that the quadratic operators are now stored in the mpSystem class
- Work in progress!!!

### 16.01.2017
- finally changed the initial state part to a working one
- changed time evolution to be calculated only by datapoint evaluation, so instead of doing all the time steps,
	raise the time evolution matrix at the beginning to the power of timesteps between datapoints and just do it ONCE betwen every datapoint - might be inaccurate!
- added energy to plotting as well

### 14.01.2017
- omitted some changes... sorry for that
- changed plot to use Agg (works better with the cluster)
- better reduction algorithm (order of magnitude faster, iterator is stored)
- storing logfile in data
- changed renormalize to normalize since it is misleading (ren. group is quite different)
- cosmetics
- added total system energy to calculation

### 06.01.2017
- changed renormalization to np.einsum which is about 10 times faster
- added printing out of norm every 10%
- Runge-Kutta had an error - the matrix power was actually just array multiplication, stability is now really better than before!
- added boolean for total entropy calculation (avoid this for faster calculation)
- added very strict hermiticity check! (may be too strict, check)

### 05.01.2017
- added only reduced density matrix calculation option
- cosmetics
- added state norm check to avoid numerical errors leading to unphysical behaviour
- clearing of data after plot only!

### 04.01.2017
- changed plotting to intelligent state number catching

### 03.01.2017
- removed old functions from mpEntropy
- minor writing bugfixes
- added variable config.ini naming

### 01.01.2017
- changed filename entangle_entropy.py to mpEntropy.py
- changed filename plot.py to entPlot.py
- moved plotting to mpSystem class
- imported dot differently for ever faster time evolution
- completed transition to class
- added ini file for configuration parameters! (not in repo, is produced automatically if not given)

### 31.12.2016
- changed density matrix back to outer product, since it is a lot faster
- changed trace algorithm to np.einsum for it is faster than trace (computes only the needed elements)

### 30.12.2016
- found failure in old reduction algorithm - if traced out states are not in a block, the algorithm produces errors
- new class is now complete, everything up and running and ready to go
- changed main to use new class and methods -> keep changing!
- new reduce density algorithm works super nice, is actually intelligent now (only accesses needed states)
- state evolution extremely fast -> pointstore takes long time (check what's going on there)
- renormalization not after every step, takes too long (suggestion: do once, store and repeat until told to repeat again)

### 29.12.2016
- overhaul of naming in entangle_entropy as well as defining a class for all system parameters
- rewrite of all essential functions in terms of new system class
- new reduce matrix algorithm has to be tested! but speed has been increased

### 28.12.2016
- better platform independent folder function is prepare folders
- removed reverse ordering in reduced density matrix algorithm (not needed since it is treated in offset algorithm)
- abandoned analytic solution approach so speed this thing up

### 21.12.2016
- occupation numbers never have imaginary parts (checked) so threw them away

### 20.12.2016
- checked reduction of 3 states in N=2,m=4 thing - worked nicely
- introduced a way of calculating interaction hamiltonian with loops (N=10,m=4 already 10s)

### 19.12.2016
- added a routine to interact, which sets elements smaller than 1e-4 to 0
- changed precision in matrix and state to double
- changed norm calculation to la.norm
- fixed hamiltonian use in time step
- changed to Runge Kutta 4th order
- fixed non square check - only the imaginary part is now differing big time... actually increasing with time
- checked interaction terms
- changed basis2dict and reduce_dens to intelligent array thing (tested for N=1,m=4 do again for N=2,m=4!!!!!)
- removed unnecessary case separation in basis2tuple

### 15.12.2016
- some cleanup fixes (still pretty slow)
- messed around with datatypes to increase precision - revise! now it shouldn't be changed
- reduced precision on negative eigenvalues error output
- removed timestep function and included it manifestly in main code 
- changed int to int32 in noofel

### 14.12.2016
- fixed cleanup of density matrix
- reduced number of bools in main
- reduced number of plotting functions
- cleaned up some print functions
- added better step output to print function

### 13.12.2016
- added possibility to trace out 1st state (index 0)
- checked results for N=2,m=3 rdm (traced out every single state)
- checked for N=1,m=4 NOTE: no need for ordering change in rdm algorithm,
	since it nevertheless is in non connected block form so the eigenvalues are the same yet in different ordering
- note: in myplot2 there has been a change at some time, where you can activate or deactivate the analytic plot for Rabi 1 particle

### 09.12.2016
- changed + expanded consistency check of density matrices
- analytic check of subsystem entropy for 2-state system 1 particle
- added eta to evaluation and changed some cosmetics (added comments to reduce matrix algorithm)
- super cool mega nice time display thingy
- todo list: 	- treated negative eigenvalues of rdm, (they are very very small -> more computer error than else)
				- removed norm, seems to be no problem
				- added square of density matrix problem

### 07.12.2016
- just some parameter changes, renaming of stuff, nothing special or functional

### 06.12.2016
- created changelog
- code-files:
	harmosz_mp.py
	myplot2.py
	interface.py
	entangle_entropy.py
- introduced entropy function in entangle_entropy.py
- added benchmarking code and plot
- reimplemented renormalization, since time evolution is not unitary in discrete steps of finite t... Hans said it's ok
